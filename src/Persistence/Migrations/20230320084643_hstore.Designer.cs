// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(RoutingDbContext))]
    [Migration("20230320084643_hstore")]
    partial class AddHstore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgrouting");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Persistence.Entities.PgRouting.PgRoutingAStarOneToOneResult", b =>
                {
                    b.Property<double>("AggCost")
                        .HasColumnType("double precision")
                        .HasColumnName("agg_cost");

                    b.Property<double>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<long?>("Edge")
                        .HasColumnType("bigint")
                        .HasColumnName("edge");

                    b.Property<long>("Node")
                        .HasColumnType("bigint")
                        .HasColumnName("node");

                    b.Property<long>("PathSeq")
                        .HasColumnType("bigint")
                        .HasColumnName("path_seq");

                    b.Property<long>("Seq")
                        .HasColumnType("bigint")
                        .HasColumnName("seq");

                    b.HasIndex("Edge");

                    b.HasIndex("Node");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Persistence.Entities.RoutingEdge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("double precision");

                    b.Property<long>("FromId")
                        .HasColumnType("bigint");

                    b.Property<double>("ReverseCost")
                        .HasColumnType("double precision");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToId")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("RoutingEdges");
                });

            modelBuilder.Entity("Persistence.Entities.RoutingGraphVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("RoutingGraphVersions");
                });

            modelBuilder.Entity("Persistence.Entities.RoutingNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Point>("Coordinates")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<decimal>("Level")
                        .HasColumnType("numeric");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RoutingNodes");
                });

            modelBuilder.Entity("Persistence.Entities.PgRouting.PgRoutingAStarOneToOneResult", b =>
                {
                    b.HasOne("Persistence.Entities.RoutingEdge", "RoutingEdge")
                        .WithMany()
                        .HasForeignKey("Edge");

                    b.HasOne("Persistence.Entities.RoutingNode", "RoutingNode")
                        .WithMany()
                        .HasForeignKey("Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoutingEdge");

                    b.Navigation("RoutingNode");
                });

            modelBuilder.Entity("Persistence.Entities.RoutingEdge", b =>
                {
                    b.HasOne("Persistence.Entities.RoutingNode", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistence.Entities.RoutingNode", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });
#pragma warning restore 612, 618
        }
    }
}
