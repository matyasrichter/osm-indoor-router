---
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop"

stages:
  - prereq
  - lint
  - build
  - test
  - docker
  - deploy
  - management

.dotnet:
  image: $CI_REGISTRY_IMAGE/dotnet
  variables:
    # 1) Name of directory where restore and build objects are stored.
    OBJECTS_DIRECTORY: 'obj'
    # 2) Name of directory used for keeping restored dependencies.
    NUGET_PACKAGES_DIRECTORY: '.nuget'
  needs:
    - job: push_dotnet
      optional: true
  cache:
    # Per-stage and per-branch caching.
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      # Specify three paths that should be cached:
      #
      # 1) Main JSON file holding information about package dependency tree, packages versions,
      # frameworks etc. It also holds information where to the dependencies were restored.
      - '$OBJECTS_DIRECTORY/project.assets.json'
      # 2) Other NuGet and MSBuild related files. Also needed.
      - '$OBJECTS_DIRECTORY/*.csproj.nuget.*'
      # 3) Path to the directory where restored dependencies are kept.
      - '$NUGET_PACKAGES_DIRECTORY'
  before_script:
    - 'dotnet restore --packages $NUGET_PACKAGES_DIRECTORY'
    - 'dotnet tool restore'

csharpier:
  extends: .dotnet
  stage: lint
  rules:
    - changes:
        - src/**/*
  script:
    - dotnet csharpier --check .

build:
  extends: .dotnet
  stage: build
  rules:
    - changes:
        - src/**/*
  script:
    - dotnet build --no-restore

test:
  extends: .dotnet
  image: $CI_REGISTRY_IMAGE/dotnet-dockercli
  stage: test
  rules:
    - changes:
        - src/**/*
  needs:
    - job: push_dotnet_dockercli
      optional: true
  services:
    - name: $CI_REGISTRY_IMAGE/docker-dind
      alias: docker
      # explicitly disable tls to avoid docker startup interruption
      command: [ "--tls=false" ]
  variables:
    # Instruct Testcontainers to use the daemon of DinD, use port 2735 for non-tls connections.
    DOCKER_HOST: "tcp://docker:2375"
    # Instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    FF_NETWORK_PER_BUILD: "true"
    TEST_DB_IMAGE_NAME: "$CI_REGISTRY_IMAGE/postgis"
    TESTCONTAINERS_RYUK_CONTAINER_IMAGE: "$CI_REGISTRY_IMAGE/testcontainers/ryuk"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      dotnet test --no-restore
      --collect:"XPlat Code Coverage"
      --test-adapter-path:.
      --logger:"junit;LogFilePath=../../artifacts/{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
    - dotnet reportgenerator -reports:'**/**/coverage.cobertura.xml' -targetdir:'artifacts/coverage' -reporttypes:'TextSummary'
    - cat artifacts/coverage/Summary.txt
  coverage: /Line coverage[\s\S].+%/
  artifacts:
    when: always
    paths:
      - ./artifacts/*test-result.xml
      - ./artifacts/coverage/Cobertura.xml
    reports:
      junit: ./artifacts/*test-result.xml
      coverage_report:
        coverage_format: cobertura
        path: ./**/**/coverage.cobertura.xml


# --------------------------------
# The following jobs are used to push images to our GitLab registry
# so that we don't have to pull them from Docker Hub.
# --------------------------------

.build_and_push_image:
  image: $CI_REGISTRY/ict/images/buildah:v1
  stage: prereq
  script:
    - buildah build -t $CI_REGISTRY_IMAGE/$PUSHED_IMAGE_NAME:latest -f $DOCKERFILE .
    - buildah push $CI_REGISTRY_IMAGE/$PUSHED_IMAGE_NAME:latest

push_dind:
  extends: .build_and_push_image
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: [ "ci-images/dind.Dockerfile" ]
  variables:
    PUSHED_IMAGE_NAME: "docker-dind"
    DOCKERFILE: "ci-images/dind.Dockerfile"

push_dotnet:
  extends: .build_and_push_image
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: [ "ci-images/dotnet.Dockerfile" ]
  variables:
    PUSHED_IMAGE_NAME: "dotnet"
    DOCKERFILE: "ci-images/dotnet.Dockerfile"

push_dotnet_dockercli:
  extends: .build_and_push_image
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: [ "ci-images/dotnet-dockercli.Dockerfile" ]
  variables:
    PUSHED_IMAGE_NAME: "dotnet-dockercli"
    DOCKERFILE: "ci-images/dotnet-dockercli.Dockerfile"

push_postgis:
  extends: .build_and_push_image
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: [ "ci-images/postgis.Dockerfile" ]
  variables:
    PUSHED_IMAGE_NAME: "postgis"
    DOCKERFILE: "ci-images/postgis.Dockerfile"

push_ryuk:
  extends: .build_and_push_image
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes: [ "ci-images/ryuk.Dockerfile" ]
  variables:
    PUSHED_IMAGE_NAME: "testcontainers/ryuk"
    DOCKERFILE: "ci-images/ryuk.Dockerfile"
