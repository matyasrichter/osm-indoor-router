/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { Route } from '../models';
import { RouteFromJSON, RouteToJSON } from '../models';

export interface RouteGetRequest {
	from: number;
	to: number;
	graphVersion: number;
	disallowStairs?: boolean;
	disallowElevators?: boolean;
	disallowEscalators?: boolean;
}

/**
 *
 */
export class RoutingApi extends runtime.BaseAPI {
	/**
	 */
	async routeGetRaw(
		requestParameters: RouteGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Route>> {
		if (requestParameters.from === null || requestParameters.from === undefined) {
			throw new runtime.RequiredError(
				'from',
				'Required parameter requestParameters.from was null or undefined when calling routeGet.'
			);
		}

		if (requestParameters.to === null || requestParameters.to === undefined) {
			throw new runtime.RequiredError(
				'to',
				'Required parameter requestParameters.to was null or undefined when calling routeGet.'
			);
		}

		if (requestParameters.graphVersion === null || requestParameters.graphVersion === undefined) {
			throw new runtime.RequiredError(
				'graphVersion',
				'Required parameter requestParameters.graphVersion was null or undefined when calling routeGet.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.from !== undefined) {
			queryParameters['from'] = requestParameters.from;
		}

		if (requestParameters.to !== undefined) {
			queryParameters['to'] = requestParameters.to;
		}

		if (requestParameters.graphVersion !== undefined) {
			queryParameters['graphVersion'] = requestParameters.graphVersion;
		}

		if (requestParameters.disallowStairs !== undefined) {
			queryParameters['disallowStairs'] = requestParameters.disallowStairs;
		}

		if (requestParameters.disallowElevators !== undefined) {
			queryParameters['disallowElevators'] = requestParameters.disallowElevators;
		}

		if (requestParameters.disallowEscalators !== undefined) {
			queryParameters['disallowEscalators'] = requestParameters.disallowEscalators;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/route`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => RouteFromJSON(jsonValue));
	}

	/**
	 */
	async routeGet(
		requestParameters: RouteGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Route> {
		const response = await this.routeGetRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
